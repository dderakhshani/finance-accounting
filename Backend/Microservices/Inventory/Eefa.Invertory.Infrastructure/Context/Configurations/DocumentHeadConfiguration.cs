// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Invertory.Infrastructure.Context;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Inventory.Domain;



#nullable disable

namespace Eefa.Invertory.Infrastructure.Context.Configurations
{
    public partial class ReceiptConfiguration : IEntityTypeConfiguration<Receipt>
    {
        public void Configure(EntityTypeBuilder<Receipt> entity)
        {
            entity.ToTable("DocumentHeads", "common");

            entity.HasComment("اسناد");

            entity.Property(e => e.Id).HasComment("شناسه");
            entity.Property(e => e.DocumentSerial);

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.DiscountPercent).HasComment("درصد تخفیف کل فاکتور");

            entity.Property(e => e.DocumentDate).HasComment("تاریخ سند");

            

            entity.Property(e => e.DocumentDiscount).HasComment("تخفیف کل سند");

            entity.Property(e => e.DocumentNo).HasComment("شماره سند");

            entity.Property(e => e.DocumentStateBaseId)
                .HasDefaultValueSql("((1))")
                .HasComment("کد وضعیت سند");

            entity.Property(e => e.ExpireDate).HasComment("تاریخ انقضا");

            entity.Property(e => e.HealthTax).HasComment("عوارض سلامت");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.IsManual).HasComment("دستی");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.ParentId).HasComment("کد والد");

            entity.Property(e => e.PartNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("شماره بخش");

            entity.Property(e => e.PaymentTypeBaseId)
                .HasDefaultValueSql("((1))")
                .HasComment("نوع پرداخت");

            entity.Property(e => e.PriceMinusDiscount)
                .HasComputedColumnSql("(isnull([TotalItemPrice],(0))-isnull([TotalItemsDiscount],(0)))", false)
                .HasComment("قیمت بعد از کسر تخفیف");

            entity.Property(e => e.PriceMinusDiscountPlusTax)
                .HasComputedColumnSql("((isnull([TotalItemPrice],(0))-isnull([TotalItemsDiscount],(0)))+isnull([VatTax],(0)))", false)
                .HasComment("قیمت با مالیات بعد از کسر تخفیف ");

            

            entity.Property(e => e.TotalItemPrice).HasComment("جمع مبلغ قابل پرداخت");

            entity.Property(e => e.TotalItemsDiscount).HasComment("جمع تخفیف");

            entity.Property(e => e.TotalProductionCost)
                .HasDefaultValueSql("((0))")
                .HasComment("جمع قیمت تمام شده");

            entity.Property(e => e.VatDutiesTax).HasComment("مالیات ارزش افزوده");

            entity.Property(e => e.VatTax).HasComment("عوارض ارزش افزوده");

            entity.Property(e => e.VoucherHeadId).HasComment("کد سند حسابداری");

            entity.Property(e => e.WarehouseId).HasComment("کد انبار");

            entity.Property(e => e.YearId).HasComment("کد سال");

            //entity.HasOne(d => d.DocumentStateBase)
            //    .WithMany(p => p.DocumentHeadDocumentStateBases)
            //    .HasForeignKey(d => d.DocumentStateBaseId)
            //    .OnDelete(DeleteBehavior.ClientSetNull)
            //    .HasConstraintName("FK_DocumentHeads_BaseValues");

           

            //entity.HasOne(d => d.PaymentTypeBase)
            //    .WithMany(p => p.DocumentHeadPaymentTypeBases)
            //    .HasForeignKey(d => d.PaymentTypeBaseId)
            //    .OnDelete(DeleteBehavior.ClientSetNull)
            //    .HasConstraintName("FK_DocumentHead_BaseValues3");

            //entity.HasOne(d => d.Year)
            //    .WithMany(p => p.DocumentHeads)
            //    .HasForeignKey(d => d.YearId)
            //    .OnDelete(DeleteBehavior.ClientSetNull)
            //    .HasConstraintName("FK_DocumentHead_Years");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Receipt> entity);
    }
}
