// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;

#nullable disable

namespace Eefa.Accounting.Data.Entities.Configurations
{
    public partial class CustomerConfiguration : IEntityTypeConfiguration<Customer>
    {
        public void Configure(EntityTypeBuilder<Customer> entity)
        {
            entity.ToTable("Customers", "Sale");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.CurrentAgentId).HasComment("کد اپراتور مرتبط با مشتری ");

            entity.Property(e => e.CustomerCode)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("شماره مشتری");

            entity.Property(e => e.CustomerTypeBaseId).HasComment("نوع مشتری ");
            entity.Property(e => e.AccountReferenceGroupId).HasComment("گروه مشتری ");

            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("توضیحات ");

            entity.Property(e => e.EconomicCode)
                .HasMaxLength(50)
                .HasComment("کد اقتصادی مشتری");

            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.PersonId).HasComment("کد شخص ");

            entity.HasOne(d => d.AccountReferencesGroup)
                .WithMany(p => p.Customers)
                .HasForeignKey(d => d.AccountReferenceGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customers_AccountReferencesGroups");

            entity.HasOne(d => d.CustomerTypeBase)
                .WithMany(p => p.Customers)
                .HasForeignKey(d => d.CustomerTypeBaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_BaseValues");

            entity.HasOne(d => d.Person)
                .WithMany(p => p.Customers)
                .HasForeignKey(d => d.PersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_Persons");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Customer> entity);
    }
}
