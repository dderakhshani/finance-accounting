// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Admin.Data.reverse;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;

using Eefa.WorkflowAdmin.WebApi.Domain.Databases.Entities;

#nullable disable

namespace Eefa.Admin.Data.reverse.Configurations
{
    public partial class PersonBankAccountsConfiguration : IEntityTypeConfiguration<PersonBankAccount>
    {
        public void Configure(EntityTypeBuilder<PersonBankAccount> entity)
        {
            entity.ToTable("PersonBankAccounts", "admin");

            entity.Property(e => e.Id)
                .HasComment("شناسه");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .HasComment("شماره حساب");

            entity.Property(e => e.AccountTypeBaseId).HasComment("نوع حساب بانکی ");

            entity.Property(e => e.BankBranchName)
                .HasMaxLength(50)
                .HasComment("نام و کد شعبه ");

            entity.Property(e => e.BankId).HasComment("نام بانک");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("توضیحات");

            entity.Property(e => e.IsDefault).HasComment("تلفن پیش فرض ");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.PersonId).HasComment("کد شخص");

            entity.HasOne(d => d.AccountTypeBase)
                .WithMany(p => p.PersonBankAccounts)
                .HasForeignKey(d => d.AccountTypeBaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_admin.PersonBankAccount_BaseValues");

            entity.HasOne(d => d.Bank)
                .WithMany(p => p.PersonBankAccounts)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_admin.PersonBankAccount_Banks");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.PersonBankAccountsCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_admin.PersonBankAccount_Users");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.PersonBankAccounts)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_admin.PersonBankAccount_Roles");

            entity.HasOne(d => d.Person)
                .WithMany(p => p.PersonBankAccounts)
                .HasForeignKey(d => d.PersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_admin.PersonBankAccount_Persons");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<PersonBankAccount> entity);
    }
}
