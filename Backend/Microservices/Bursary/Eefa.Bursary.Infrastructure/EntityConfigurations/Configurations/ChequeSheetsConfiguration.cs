// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Bursary.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Bursary.Domain.Entities;
#nullable disable

namespace Eefa.Bursary.Infrastructure.EntityConfigurations.Configurations
{
    public partial class ChequeSheetsConfiguration : IEntityTypeConfiguration<ChequeSheets>
    {
        public void Configure(EntityTypeBuilder<ChequeSheets> entity)
        {
            entity.ToTable("ChequeSheets", "bursary");

            entity.HasComment("برگه های چک");

            entity.Property(e => e.AccountNumber).HasMaxLength(30);

            entity.Property(e => e.BranchName).HasMaxLength(150);

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.Description).HasMaxLength(1000);

            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("آیا فعال است ");

            entity.Property(e => e.IssueDate).HasComment("تاریخ صدور");

            entity.Property(e => e.IssuerEmployeeId).HasComment("صادر کننده چک ");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.PayChequeId).HasComment("شماره دسته چک ");

            entity.Property(e => e.ReceiptDate).HasComment("تاریخ سر رسید ");

            entity.Property(e => e.SheetSeqNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("شماره سریال چک");

            entity.Property(e => e.SheetSeriNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("شماره سری چک ");

            entity.Property(e => e.SheetUniqueNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("شماره چک");

            entity.Property(e => e.TotalCost).HasColumnType("money");

            entity.HasOne(d => d.AccountReference)
                .WithMany(p => p.ChequeSheetsAccountReferences)
                .HasForeignKey(d => d.AccountReferenceId)
                .HasConstraintName("FK_ChequeSheets_AccountReferences");

            entity.HasOne(d => d.Bank)
                .WithMany(p => p.ChequeSheets)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_ChequeSheets_Banks");

            entity.HasOne(d => d.ChequeTypeBase)
                .WithMany(p => p.ChequeSheets)
                .HasForeignKey(d => d.ChequeTypeBaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChequeSheets_BaseValues");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.ChequeSheetsCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChequeSheets_Users1");

            entity.HasOne(d => d.ModifiedBy)
                .WithMany(p => p.ChequeSheetsModifiedBies)
                .HasForeignKey(d => d.ModifiedById)
                .HasConstraintName("FK_ChequeSheets_Users");

            entity.HasOne(d => d.OwnerChequeReferenceGroup)
                .WithMany(p => p.ChequeSheetsOwnerChequeReferenceGroups)
                .HasForeignKey(d => d.OwnerChequeReferenceGroupId)
                .HasConstraintName("FK_ChequeSheets_AccountReferencesGroups1");

            entity.HasOne(d => d.OwnerChequeReference)
                .WithMany(p => p.ChequeSheetsOwnerChequeReferences)
                .HasForeignKey(d => d.OwnerChequeReferenceId)
                .HasConstraintName("FK_ChequeSheets_AccountReferences2");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.ChequeSheets)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChequeSheets_Roles");

            entity.HasOne(d => d.PayCheque)
                .WithMany(p => p.ChequeSheets)
                .HasForeignKey(d => d.PayChequeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ChequeSheets_PayCheque");

            entity.HasOne(d => d.ReceiveChequeReferenceGroup)
                .WithMany(p => p.ChequeSheetsReceiveChequeReferenceGroups)
                .HasForeignKey(d => d.ReceiveChequeReferenceGroupId)
                .HasConstraintName("FK_ChequeSheets_AccountReferencesGroups");

            entity.HasOne(d => d.ReceiveChequeReference)
                .WithMany(p => p.ChequeSheetsReceiveChequeReferences)
                .HasForeignKey(d => d.ReceiveChequeReferenceId)
                .HasConstraintName("FK_ChequeSheets_AccountReferences1");


            entity.HasOne(d => d.IssueReferenceBank)
    .WithMany(p => p.ChequeSheetsIssueReferenceBank)
    .HasForeignKey(d => d.IssueReferenceBankId) 
                .HasConstraintName("FK_ChequeSheets_AccountReferencesIssueReferenceBankId");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<ChequeSheets> entity);
    }
}
