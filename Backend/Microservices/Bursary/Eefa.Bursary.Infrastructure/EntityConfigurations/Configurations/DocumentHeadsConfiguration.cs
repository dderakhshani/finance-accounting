// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Bursary.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Bursary.Domain.Entities;
#nullable disable

namespace Eefa.Bursary.Infrastructure.EntityConfigurations.Configurations
{
    public partial class DocumentHeadsConfiguration : IEntityTypeConfiguration<DocumentHeads>
    {
        public void Configure(EntityTypeBuilder<DocumentHeads> entity)
        {
            entity.ToTable("DocumentHeads", "common");

            entity.HasComment("اسناد");

            entity.HasIndex(e => e.DocumentDate)
                .HasName("IX_tbl_sell_H_1");

            entity.HasIndex(e => e.ParentId)
                .HasName("IX_DocumentHead_3");

            entity.HasIndex(e => e.PaymentTypeBaseId)
                .HasName("IX_DocumentHead_7");

            entity.HasIndex(e => e.WarehouseId)
                .HasName("IX_DocumentHead_2");

            entity.HasIndex(e => new { e.DocumentNo, e.DocumentSerial })
                .HasName("IX_DocumentHeads")
                .IsUnique();

            entity.Property(e => e.Id).HasComment("شناسه");

            entity.Property(e => e.CodeVoucherGroupId).HasComment("کد گروه سند ");

            entity.Property(e => e.CommandDescription)
                .HasMaxLength(300)
                .HasComment("توضیحات برنامه نویس ");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.CreditAccountHeadId).HasComment("آیدی سرفصل حساب بستانکار");

            entity.Property(e => e.CreditAccountReferenceGroupId).HasComment("آیدی گروه حساب بستانکار");

            entity.Property(e => e.CreditAccountReferenceId).HasComment(" آیدی حساب بستانکار");

            entity.Property(e => e.DebitAccountHeadId).HasComment("آیدی سرفصل حساب بدهکار");

            entity.Property(e => e.DebitAccountReferenceGroupId).HasComment("آیدی گروه حساب بدهکار");

            entity.Property(e => e.DebitAccountReferenceId).HasComment("آیدی حساب بدهکار");

            entity.Property(e => e.DiscountPercent).HasComment("درصد تخفیف کل فاکتور");

            entity.Property(e => e.DocumentDate).HasComment("تاریخ سند");

            entity.Property(e => e.DocumentDescription)
                .HasMaxLength(300)
                .HasComment("توضیحات سند");

            entity.Property(e => e.DocumentDiscount).HasComment("تخفیف کل سند");

            entity.Property(e => e.DocumentId)
                .HasDefaultValueSql("((1))")
                .HasComment("شماره فرم عملیات مالی ");

            entity.Property(e => e.DocumentNo).HasComment("شماره سند");

            entity.Property(e => e.DocumentSerial)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasComment("شماره سریال سند - کد سال +کد شعبه +کد سیستم ");

            entity.Property(e => e.DocumentStateBaseId).HasComment("کد وضعیت کالا در انبار ، مثل نیاز به تست");

            entity.Property(e => e.DocumentStauseBaseValue).HasComment("وضعیت سند در فرآیند گردش ، مرحله سند");

            entity.Property(e => e.ExpireDate).HasComment("تاریخ انقضا");

            entity.Property(e => e.ExtraCost).HasComment("هزینه اضافه ");

            entity.Property(e => e.FinancialOperationNumber)
                .HasMaxLength(50)
                .HasComment("شماره فرم عملیات مالی");

            entity.Property(e => e.HealthTax).HasComment("عوارض سلامت");

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(50)
                .HasComment("شماره فاکتور فروشنده");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.IsImportPurchase)
                .HasDefaultValueSql("((0))")
                .HasComment("صورتحساب داخلی یا خارجی ");

            entity.Property(e => e.IsManual).HasComment("دستی");

            entity.Property(e => e.IsPlacementComplete)
                .HasDefaultValueSql("((0))")
                .HasComment("آیا جایگذاری تکمیل شده است ");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.ParentId).HasComment("کد والد");

            entity.Property(e => e.PartNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("شماره بخش");

            entity.Property(e => e.PaymentTypeBaseId)
                .HasDefaultValueSql("((1))")
                .HasComment("نوع پرداخت");

            entity.Property(e => e.PriceMinusDiscount)
                .HasComment("قیمت بعد از کسر تخفیف")
                .HasComputedColumnSql("(isnull([TotalItemPrice],(0))-isnull([DocumentDiscount],(0)))");

            entity.Property(e => e.PriceMinusDiscountPlusTax)
                .HasComment("قیمت با مالیات بعد از کسر تخفیف -مبلغ قابل پرداخت ")
                .HasComputedColumnSql("(((isnull([TotalItemPrice],(0))-isnull([DocumentDiscount],(0)))+isnull([VatDutiesTax],(0)))+isnull([VatTax],(0)))");

            entity.Property(e => e.RequestDate).HasComment("تاریخ درخواست ");

            entity.Property(e => e.RequestNo)
                .HasMaxLength(50)
                .HasComment("شماره درخواست ");

            entity.Property(e => e.Tags)
                .HasMaxLength(1000)
                .HasComment("برچسبها");

            entity.Property(e => e.TotalItemPrice).HasComment("جمع مبلغ قابل پرداخت");

            entity.Property(e => e.TotalItemsDiscount).HasComment("جمع تخفیف");

            entity.Property(e => e.TotalProductionCost)
                .HasDefaultValueSql("((0))")
                .HasComment("جمع قیمت تمام شده");

            entity.Property(e => e.TotalQuantity).HasComment("جمع تعداد اقلام سند");

            entity.Property(e => e.TotalWeight).HasComment("وزن اقلام سند");

            entity.Property(e => e.VatDutiesTax).HasComment("مالیات ارزش افزوده");

            entity.Property(e => e.VatPercentage)
                .HasDefaultValueSql("((0))")
                .HasComment("درصد مالیات بر ارزش افزوده ");

            entity.Property(e => e.VatTax).HasComment("عوارض ارزش افزوده");

            entity.Property(e => e.ViewId).HasComment("لیست انواع سند ");

            entity.Property(e => e.VoucherHeadId).HasComment("کد سند حسابداری");

            entity.Property(e => e.WarehouseId).HasComment("کد انبار");

            entity.Property(e => e.YearId).HasComment("کد سال");

            entity.HasOne(d => d.CodeVoucherGroup)
                .WithMany(p => p.DocumentHeads)
                .HasForeignKey(d => d.CodeVoucherGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentHeads_CodeVoucherGroups");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.DocumentHeadsCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentHeads_Users");

            entity.HasOne(d => d.CreditAccountHead)
                .WithMany(p => p.DocumentHeadsCreditAccountHeads)
                .HasForeignKey(d => d.CreditAccountHeadId)
                .HasConstraintName("FK_DocumentHeads_AccountHead");

            entity.HasOne(d => d.CreditAccountReferenceGroup)
                .WithMany(p => p.DocumentHeadsCreditAccountReferenceGroups)
                .HasForeignKey(d => d.CreditAccountReferenceGroupId)
                .HasConstraintName("FK_DocumentHeads_AccountReferencesGroups");

            entity.HasOne(d => d.CreditAccountReference)
                .WithMany(p => p.DocumentHeadsCreditAccountReferences)
                .HasForeignKey(d => d.CreditAccountReferenceId)
                .HasConstraintName("FK_DocumentHeads_AccountReferences");

            entity.HasOne(d => d.DebitAccountHead)
                .WithMany(p => p.DocumentHeadsDebitAccountHeads)
                .HasForeignKey(d => d.DebitAccountHeadId)
                .HasConstraintName("FK_DocumentHeads_AccountHead1");

            entity.HasOne(d => d.DebitAccountReferenceGroup)
                .WithMany(p => p.DocumentHeadsDebitAccountReferenceGroups)
                .HasForeignKey(d => d.DebitAccountReferenceGroupId)
                .HasConstraintName("FK_DocumentHeads_AccountReferencesGroups1");

            entity.HasOne(d => d.DebitAccountReference)
                .WithMany(p => p.DocumentHeadsDebitAccountReferences)
                .HasForeignKey(d => d.DebitAccountReferenceId)
                .HasConstraintName("FK_DocumentHeads_AccountReferences1");

            entity.HasOne(d => d.ModifiedBy)
                .WithMany(p => p.DocumentHeadsModifiedBies)
                .HasForeignKey(d => d.ModifiedById)
                .HasConstraintName("FK_DocumentHeads_Users1");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.DocumentHeads)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentHeads_Roles");

            entity.HasOne(d => d.Parent)
                .WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_DocumentHead_DocumentHead");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<DocumentHeads> entity);
    }
}
