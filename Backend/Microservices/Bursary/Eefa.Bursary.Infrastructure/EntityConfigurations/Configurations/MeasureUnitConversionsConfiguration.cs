// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Bursary.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Bursary.Domain.Entities;
#nullable disable

namespace Eefa.Bursary.Infrastructure.EntityConfigurations.Configurations
{
    public partial class MeasureUnitConversionsConfiguration : IEntityTypeConfiguration<MeasureUnitConversions>
    {
        public void Configure(EntityTypeBuilder<MeasureUnitConversions> entity)
        {
            entity.ToTable("MeasureUnitConversions", "common");

            entity.HasComment("تبدیل واحد های اندازه گیری");

            entity.Property(e => e.Id).HasComment("شناسه");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.DestinationMeasureUnitId).HasComment("واحد اندازه گیری ثانویه");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.Ratio).HasComment("ضریب تبدیل");

            entity.Property(e => e.SourceMeasureUnitId).HasComment("واحد اندازه گیری اولیه");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.MeasureUnitConversionsCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MeasureUnitConversion_Users");

            entity.HasOne(d => d.DestinationMeasureUnit)
                .WithMany(p => p.MeasureUnitConversionsDestinationMeasureUnits)
                .HasForeignKey(d => d.DestinationMeasureUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MeasureUnitConversion_MeasureUnitDestination");

            entity.HasOne(d => d.ModifiedBy)
                .WithMany(p => p.MeasureUnitConversionsModifiedBies)
                .HasForeignKey(d => d.ModifiedById)
                .HasConstraintName("FK_MeasureUnitConversion_Users1");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.MeasureUnitConversions)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MeasureUnitConversion_Roles");

            entity.HasOne(d => d.SourceMeasureUnit)
                .WithMany(p => p.MeasureUnitConversionsSourceMeasureUnits)
                .HasForeignKey(d => d.SourceMeasureUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MeasureUnitConversion_MeasureUnit");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<MeasureUnitConversions> entity);
    }
}
