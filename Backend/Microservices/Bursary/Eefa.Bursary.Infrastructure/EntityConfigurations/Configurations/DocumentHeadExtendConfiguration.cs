// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Bursary.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Bursary.Domain.Entities;
#nullable disable

namespace Eefa.Bursary.Infrastructure.EntityConfigurations.Configurations
{
    public partial class DocumentHeadExtendConfiguration : IEntityTypeConfiguration<DocumentHeadExtend>
    {
        public void Configure(EntityTypeBuilder<DocumentHeadExtend> entity)
        {
            entity.ToTable("DocumentHeadExtend", "common");

            entity.Property(e => e.CorroborantReferenceId).HasComment("کد تایید کننده جنس در انبار قرنطینه ");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.DocumentHeadId).HasComment("شماره سند ");

            entity.Property(e => e.FollowUpReferenceId).HasComment("کد پی گیری کننده ");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.RequesterReferenceId).HasComment("کد درخواست کننده ");

            entity.HasOne(d => d.CorroborantReference)
                .WithMany(p => p.DocumentHeadExtendCorroborantReferences)
                .HasForeignKey(d => d.CorroborantReferenceId)
                .HasConstraintName("FK_DocumentHeadExtend_AccountReferencesCorroborant");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.DocumentHeadExtendCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentHeadExtend_Users_CreatedBy");

            entity.HasOne(d => d.DocumentHead)
                .WithMany(p => p.DocumentHeadExtends)
                .HasForeignKey(d => d.DocumentHeadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentHeadExtend_DocumentHeads");

            entity.HasOne(d => d.FollowUpReference)
                .WithMany(p => p.DocumentHeadExtendFollowUpReferences)
                .HasForeignKey(d => d.FollowUpReferenceId)
                .HasConstraintName("FK_DocumentHeadExtend_AccountReferences_FollowUp");

            entity.HasOne(d => d.ModifiedBy)
                .WithMany(p => p.DocumentHeadExtendModifiedBies)
                .HasForeignKey(d => d.ModifiedById)
                .HasConstraintName("FK_DocumentHeadExtend_Users_Modifyby");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.DocumentHeadExtends)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentHeadExtend_Roles");

            entity.HasOne(d => d.RequesterReference)
                .WithMany(p => p.DocumentHeadExtendRequesterReferences)
                .HasForeignKey(d => d.RequesterReferenceId)
                .HasConstraintName("FK_DocumentHeadExtend_AccountReferences_Requster");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<DocumentHeadExtend> entity);
    }
}
