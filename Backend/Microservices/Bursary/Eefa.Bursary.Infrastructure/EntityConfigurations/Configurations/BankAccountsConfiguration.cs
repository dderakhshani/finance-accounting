// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Bursary.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Bursary.Domain.Entities;
using Eefa.Bursary.Domain.Entities.Definitions;
#nullable disable

namespace Eefa.Bursary.Infrastructure.EntityConfigurations.Configurations
{
    public partial class BankAccountsConfiguration : IEntityTypeConfiguration<BankAccounts>
    {
        public void Configure(EntityTypeBuilder<BankAccounts> entity)
        {
            entity.ToTable("BankAccounts", "bursary");

            entity.HasComment("حسابهای بانکی");

            entity.HasIndex(e => new { e.BankBranchId, e.AccountNumber })
                .HasName("IX_BankAccounts")
                .IsUnique();

            entity.Property(e => e.AccountHeadId).HasComment("سر فصل حساب");

            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(50);

            entity.Property(e => e.AccountReferencesGroupId).HasComment("گروه تفصیل");

            entity.Property(e => e.AccountStatus).HasComment(@"1 فعال
2 غیر فعال دائم 
3 غیر فعال موقت 
4 فقط ورودی 
5 فقط خروجی ");

            entity.Property(e => e.AccountTypeBaseId).HasComment("نوع حساب ");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.CurrenceTypeBaseId).HasComment("نوع ارز");

            entity.Property(e => e.HaveChekBook).HasComment("آیا دسته چک دارد");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.ReferenceId).HasComment("کد تفصیل");

            entity.Property(e => e.RelatedBankAccountId).HasComment("شماره حساب مرتبط ");

            entity.Property(e => e.Sheba)
                .IsRequired()
                .HasMaxLength(50);

            entity.Property(e => e.SignersJson)
                .IsRequired()
                .HasMaxLength(1000);

            entity.Property(e => e.SubsidiaryCodeId).HasComment("حساب پشتیبان");

            entity.Property(e => e.WithdrawalLimit)
                .HasColumnType("money")
                .HasComment("محدودیت برداشت");

            entity.HasOne(d => d.AccountTypeBase)
                .WithMany(p => p.BankAccounts)
                .HasForeignKey(d => d.AccountTypeBaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankAccounts_BaseValues");

            entity.HasOne(d => d.BankBranch)
                .WithMany(p => p.BankAccounts)
                .HasForeignKey(d => d.BankBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankAccounts_BankBranches");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.BankAccountsCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankAccounts_Users");

            entity.HasOne(d => d.ModifiedBy)
                .WithMany(p => p.BankAccountsModifiedBies)
                .HasForeignKey(d => d.ModifiedById)
                .HasConstraintName("FK_BankAccounts_Users1");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.BankAccounts)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankAccounts_Roles");

            entity.HasOne(d => d.Parent)
                .WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_BankAccounts_BankAccounts");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<BankAccounts> entity);
    }
}
