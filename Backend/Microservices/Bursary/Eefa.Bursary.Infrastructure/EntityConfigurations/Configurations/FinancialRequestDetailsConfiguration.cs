// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Bursary.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Bursary.Domain.Entities;
#nullable disable

namespace Eefa.Bursary.Infrastructure.EntityConfigurations.Configurations
{
    public partial class FinancialRequestDetailsConfiguration : IEntityTypeConfiguration<FinancialRequestDetails>
    {
        public void Configure(EntityTypeBuilder<FinancialRequestDetails> entity)
        {
            entity.ToTable("FinancialRequestDetails", "bursary");

            entity.HasComment("اسناد");

            entity.Property(e => e.Id).HasComment("شناسه");

            entity.Property(e => e.Amount)
                .HasColumnType("money")
                .HasComment("مبلغ");

            entity.Property(e => e.ChequeSheetId).HasComment("کد شیت چک ");

            entity.Property(e => e.CreatedAt).HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.CreditAccountReferenceGroupId).HasComment("گروه بستانکار");

            entity.Property(e => e.CreditAccountReferenceId).HasComment("کد بستانکار");

            entity.Property(e => e.CurrencyAmount)
                .HasColumnType("money")
                .HasComment("مقدار ارز");

            entity.Property(e => e.CurrencyFee)
                .HasColumnType("money")
                .HasComment("نرخ ارز");

            entity.Property(e => e.CurrencyTypeBaseId).HasComment("نوع ارز");

            entity.Property(e => e.DebitAccountReferenceGroupId).HasComment("گروه بدهکار");

            entity.Property(e => e.DebitAccountReferenceId).HasComment("کد بدهکار");

            entity.Property(e => e.DeliveryOrderCode).HasComment("شماره برگ سبز صادراتی");

            entity.Property(e => e.Description).HasComment("توضیحات");

            entity.Property(e => e.DocumentTypeBaseId).HasComment("نوع سند ");

            entity.Property(e => e.FinancialReferenceTypeBaseId).HasComment("مبنای دریافت / پرداخت ");

            entity.Property(e => e.FinancialRequestId).HasComment("شماره فرم عملیات مالی");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.IsRial).HasComment("0 : Rial , 2:Non-Rial");

            entity.Property(e => e.ModifiedAt).HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.NonRialStatus).HasComment(@"1 واریز مشتری به صرافی
2 حواله صرافی به حساب ارزی در بانک
3 حواله ریالی صرافی به حساب ریالی در بانک");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.PaymentCode).HasComment("شناسه پرداخت / شماره حواله");

            entity.Property(e => e.RegistrationCode).HasComment("گد رهگیری فیش نقدی /پوز");

            entity.Property(e => e.SowiftCode)
           
                .HasComment("کد سوئیفت ");

            entity.HasOne(d => d.ChequeSheet)
                .WithMany(p => p.FinancialRequestDetails)
                .HasForeignKey(d => d.ChequeSheetId)
                .HasConstraintName("FK_FinancialRequestDetails_ChequeSheets");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.FinancialRequestDetailsCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinancialRequestDetails_Users1");

            entity.HasOne(d => d.CreditAccountHead)
                .WithMany(p => p.FinancialRequestDetailsCreditAccountHeads)
                .HasForeignKey(d => d.CreditAccountHeadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinancialRequestDetails_AccountHead");

            entity.HasOne(d => d.CreditAccountReferenceGroup)
                .WithMany(p => p.FinancialRequestDetailsCreditAccountReferenceGroups)
                .HasForeignKey(d => d.CreditAccountReferenceGroupId)
                .HasConstraintName("FK_FinancialRequestDetails_AccountReferencesGroups");

            entity.HasOne(d => d.CreditAccountReference)
                .WithMany(p => p.FinancialRequestDetailsCreditAccountReferences)
                .HasForeignKey(d => d.CreditAccountReferenceId)
                .HasConstraintName("FK_FinancialRequestDetails_AccountReferences");

            entity.HasOne(d => d.CurrencyTypeBase)
                .WithMany(p => p.FinancialRequestDetailsCurrencyTypeBases)
                .HasForeignKey(d => d.CurrencyTypeBaseId)
                .HasConstraintName("FK_FinancialRequestDetails_BaseValues1");

            entity.HasOne(d => d.DebitAccountHead)
                .WithMany(p => p.FinancialRequestDetailsDebitAccountHeads)
                .HasForeignKey(d => d.DebitAccountHeadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinancialRequestDetails_AccountHead1");

            entity.HasOne(d => d.DebitAccountReferenceGroup)
                .WithMany(p => p.FinancialRequestDetailsDebitAccountReferenceGroups)
                .HasForeignKey(d => d.DebitAccountReferenceGroupId)
                .HasConstraintName("FK_FinancialRequestDetails_AccountReferencesGroups1");

            entity.HasOne(d => d.DebitAccountReference)
                .WithMany(p => p.FinancialRequestDetailsDebitAccountReferences)
                .HasForeignKey(d => d.DebitAccountReferenceId)
                .HasConstraintName("FK_FinancialRequestDetails_AccountReferences1");


            entity.HasOne(d => d.DocumentTypeBase)
                .WithMany(p => p.FinancialRequestDetailsDocumentTypeBases)
                .HasForeignKey(d => d.DocumentTypeBaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinancialRequestDetails_BaseValues");

            entity.HasOne(d => d.FinancialReferenceTypeBase)
                .WithMany(p => p.FinancialRequestDetailsFinancialReferenceTypeBases)
                .HasForeignKey(d => d.FinancialReferenceTypeBaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinancialRequestDetails_BaseValues2");

            entity.HasOne(d => d.FinancialRequest)
                .WithMany(p => p.FinancialRequestDetails)
                .HasForeignKey(d => d.FinancialRequestId)
                .HasConstraintName("FK_FinancialRequestDetails_FinancialRequests");

            entity.HasOne(d => d.ModifiedBy)
                .WithMany(p => p.FinancialRequestDetailsModifiedBies)
                .HasForeignKey(d => d.ModifiedById)
                .HasConstraintName("FK_FinancialRequestDetails_Users");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.FinancialRequestDetails)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinancialRequestDetails_Roles");

            entity.HasOne(d => d.VocherDetail)
                .WithMany(p => p.FinancialRequestDetails)
                .HasForeignKey(d => d.VocherDetailId)
                .HasConstraintName("FK_FinancialRequestDetails_VouchersDetail");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<FinancialRequestDetails> entity);
    }
}
