// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Bursary.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using Eefa.Bursary.Domain.Entities;
#nullable disable

namespace Eefa.Bursary.Infrastructure.EntityConfigurations.Configurations
{
    public partial class DocumentItemsConfiguration : IEntityTypeConfiguration<DocumentItems>
    {
        public void Configure(EntityTypeBuilder<DocumentItems> entity)
        {
            entity.ToTable("DocumentItems", "common");

            entity.HasComment("ریز اقلام اسناد");

            entity.HasIndex(e => e.DocumentHeadId)
                .HasName("IX_Document_D");

            entity.Property(e => e.Id).HasComment("شناسه");

            entity.Property(e => e.BomValueHeaderId).HasComment("شماره فرمول ساخت ");

            entity.Property(e => e.CommoditySerial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("سریال کالا");

            entity.Property(e => e.ConversionRatio).HasComment("نرخ تبدیل-فعلا استفاده نمیشود  ");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");

            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");

            entity.Property(e => e.CurrencyBaseId).HasComment("نوع ارز");

            entity.Property(e => e.CurrencyPrice)
                .HasDefaultValueSql("((0))")
                .HasComment("مبلغ ارز");

            entity.Property(e => e.CurrencyRate)
                .HasDefaultValueSql("((1))")
                .HasComment("نرخ واحد تبدیل ارز");

            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasComment("شرح کالا");

            entity.Property(e => e.Discount).HasComment("تخفیف");

            entity.Property(e => e.DocumentHeadId).HasComment("کد سرفصل سند");

            entity.Property(e => e.DocumentMeasureId).HasComment("واحد شمارش فعلی کالا");

            entity.Property(e => e.IOMode)
                .HasDefaultValueSql("((1))")
                .HasComment("نوع ورود1 خروج -1");

            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");

            entity.Property(e => e.IsWrongMeasure)
                .HasDefaultValueSql("((0))")
                .HasComment("اعلام اشتباه بودن واحد کالا ");

            entity.Property(e => e.MainMeasureId).HasComment("واحد شمارش اصلی کالا");

            entity.Property(e => e.MeasureUnitConversionId).HasComment("ضریب تبدیل به واحد اصلی");

            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");

            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");

            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");

            entity.Property(e => e.ProductionCost).HasComment("قیمت پایه");

            entity.Property(e => e.Quantity).HasComment("تعداد");

            entity.Property(e => e.RemainQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("تعداد/مقدار باقی مانده ");

            entity.Property(e => e.SecondaryQuantity).HasComment("تعداد / مقدار فرعی");

            entity.Property(e => e.UnitBasePrice).HasComment("قیمت در سیستم  درخواست ");

            entity.Property(e => e.UnitPrice).HasComment("قیمت واحد ");

            entity.Property(e => e.WarehouseLayoutId).HasComment("لوکیشن کالا در انبار ");

            entity.Property(e => e.Weight).HasComment("وزن کالا ");

            entity.Property(e => e.YearId).HasComment("کد سال");

            entity.HasOne(d => d.CreatedBy)
                .WithMany(p => p.DocumentItemsCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentItems_Users");

            entity.HasOne(d => d.DocumentHead)
                .WithMany(p => p.DocumentItems)
                .HasForeignKey(d => d.DocumentHeadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Document_D_Document_H");

            entity.HasOne(d => d.DocumentMeasure)
                .WithMany(p => p.DocumentItems)
                .HasForeignKey(d => d.DocumentMeasureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentItems_MeasureUnits");

            entity.HasOne(d => d.MeasureUnitConversion)
                .WithMany(p => p.DocumentItems)
                .HasForeignKey(d => d.MeasureUnitConversionId)
                .HasConstraintName("FK_DocumentItems_MeasureUnitConversions");

            entity.HasOne(d => d.ModifiedBy)
                .WithMany(p => p.DocumentItemsModifiedBies)
                .HasForeignKey(d => d.ModifiedById)
                .HasConstraintName("FK_DocumentItems_Users1");

            entity.HasOne(d => d.OwnerRole)
                .WithMany(p => p.DocumentItems)
                .HasForeignKey(d => d.OwnerRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentDetail_Roles");

            entity.HasOne(d => d.Year)
                .WithMany(p => p.DocumentItems)
                .HasForeignKey(d => d.YearId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentItems_Years");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<DocumentItems> entity);
    }
}
