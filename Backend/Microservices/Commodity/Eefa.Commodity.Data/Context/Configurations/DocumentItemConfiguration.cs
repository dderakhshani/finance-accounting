// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Eefa.Commodity.Data.Context;
using Eefa.Commodity.Data.Entities;
using Eefa.Common;
using Eefa.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace Eefa.Commodity.Data.Context.Configurations
{
    public partial class DocumentItemConfiguration : IEntityTypeConfiguration<DocumentItem>
    {
        public void Configure(EntityTypeBuilder<DocumentItem> entity)
        {
            entity.HasKey(e => e.Id).HasName("PK_Document_D");

            entity.ToTable("DocumentItems", "common", tb =>
                {
                    tb.HasComment("ریز اقلام اسناد");
                    tb.HasTrigger("DocumentItems_Trigger");
                });

            entity.HasIndex(e => e.CommodityId, "IX_DocumentItems_CommodityId");

            entity.HasIndex(e => e.MainMeasureId, "IX_DocumentItems_MainMeasureId");

            entity.HasIndex(e => e.DocumentHeadId, "IX_Document_DocmentHaedId");

            entity.Property(e => e.Id).HasComment("شناسه");
            entity.Property(e => e.BomValueHeaderId).HasComment("شماره فرمول ساخت ");
            entity.Property(e => e.CommoditySerial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("سریال کالا");
            entity.Property(e => e.ConversionRatio).HasComment("نرخ تبدیل-فعلا استفاده نمیشود  ");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان ایجاد");
            entity.Property(e => e.CreatedById).HasComment("ایجاد کننده");
            entity.Property(e => e.CurrencyBaseId).HasComment("نوع ارز");
            entity.Property(e => e.CurrencyPrice)
                .HasDefaultValue(0.0)
                .HasComment("مبلغ ارز");
            entity.Property(e => e.CurrencyRate)
                .HasDefaultValue(1.0)
                .HasComment("نرخ واحد تبدیل ارز");
            entity.Property(e => e.Description).HasComment("شرح کالا");
            entity.Property(e => e.Discount).HasComment("تخفیف");
            entity.Property(e => e.DocumentHeadId).HasComment("کد سرفصل سند");
            entity.Property(e => e.DocumentMeasureId).HasComment("واحد شمارش فعلی کالا");
            entity.Property(e => e.IOMode)
                .HasDefaultValue(1)
                .HasComment("نوع ورود1 خروج -1");
            entity.Property(e => e.IsDeleted).HasComment("آیا حذف شده است؟");
            entity.Property(e => e.IsWrongMeasure)
                .HasDefaultValue(false)
                .HasComment("اعلام اشتباه بودن واحد کالا ");
            entity.Property(e => e.MainMeasureId).HasComment("واحد شمارش اصلی کالا");
            entity.Property(e => e.MeasureUnitConversionId).HasComment("ضریب تبدیل به واحد اصلی");
            entity.Property(e => e.ModifiedAt)
                .HasDefaultValueSql("(getdate())")
                .HasComment("تاریخ و زمان اصلاح");
            entity.Property(e => e.ModifiedById).HasComment("اصلاح کننده");
            entity.Property(e => e.OwnerRoleId).HasComment("نقش صاحب سند");
            entity.Property(e => e.ProductionCost).HasComment("قیمت پایه");
            entity.Property(e => e.Quantity).HasComment("تعداد");
            entity.Property(e => e.RemainQuantity)
                .HasDefaultValue(0.0)
                .HasComment("تعداد/مقدار باقی مانده ");
            entity.Property(e => e.RequestDocumentItemId).HasComment("آیدی درخواست مربوط به این کالا");
            entity.Property(e => e.RowVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.SecondaryQuantity).HasComment("تعداد / مقدار فرعی");
            entity.Property(e => e.UnitBasePrice).HasComment("قیمت در سیستم  درخواست ");
            entity.Property(e => e.UnitPrice).HasComment("قیمت واحد ");
            entity.Property(e => e.UnitPriceWithExtraCost).HasComment("قیمت واحد تمام شده ");
            entity.Property(e => e.WarehouseLayoutId).HasComment("لوکیشن کالا در انبار ");
            entity.Property(e => e.Weight).HasComment("وزن کالا ");
            entity.Property(e => e.YearId).HasComment("کد سال");

            entity.HasOne(d => d.DocumentMeasure).WithMany(p => p.DocumentItems)
                .HasForeignKey(d => d.DocumentMeasureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentItems_MeasureUnits");

            entity.HasOne(d => d.MeasureUnitConversion).WithMany(p => p.DocumentItems)
                .HasForeignKey(d => d.MeasureUnitConversionId)
                .HasConstraintName("FK_DocumentItems_MeasureUnitConversions");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<DocumentItem> entity);
    }
}
