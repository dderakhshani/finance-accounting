<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Authorization" xml:space="preserve">
    <value>Authorization required</value>
  </data>
  <data name="Between" xml:space="preserve">
    <value>Must be more than [1] and less than [2]</value>
  </data>
  <data name="CodeVoucherGroupId" xml:space="preserve">
    <value>CodeVoucherGroupId</value>
  </data>
  <data name="CommodityId" xml:space="preserve">
    <value>CommodityId</value>
  </data>
  <data name="CreditAccountHeadId" xml:space="preserve">
    <value>CreditAccountHeadId</value>
  </data>
  <data name="CreditAccountReferenceGroupId" xml:space="preserve">
    <value>CreditAccountReferenceGroupId</value>
  </data>
  <data name="CreditAccountReferenceId" xml:space="preserve">
    <value>CreditAccountReferenceId</value>
  </data>
  <data name="DebitAccountHeadId" xml:space="preserve">
    <value>DebitAccountHeadId</value>
  </data>
  <data name="DebitAccountReferenceGroupId" xml:space="preserve">
    <value>DebitAccountReferenceGroupId</value>
  </data>
  <data name="DebitAccountReferenceId" xml:space="preserve">
    <value>DebitAccountReferenceId</value>
  </data>
  <data name="DocumentDate" xml:space="preserve">
    <value>DocumentDate</value>
  </data>
  <data name="DocumentHeadId" xml:space="preserve">
    <value>DocumentHeadId</value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>Must be more than [1]</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="InCurrentYearInUse" xml:space="preserve">
    <value>This item is in use in current year</value>
  </data>
  <data name="InUse" xml:space="preserve">
    <value>This item is in use</value>
  </data>
  <data name="InvalidFromat" xml:space="preserve">
    <value>Testtttttttttttttt</value>
  </data>
  <data name="InvoiceNo" xml:space="preserve">
    <value>InvoiceNo</value>
  </data>
  <data name="IsNotValidCodeLevel" xml:space="preserve">
    <value>Level code is not valid</value>
  </data>
  <data name="IsNotValidValue" xml:space="preserve">
    <value>Value [1] is not valid</value>
  </data>
  <data name="IsRequired" xml:space="preserve">
    <value>You must fill this field</value>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>Must be less than [1]</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Must be logged in</value>
  </data>
  <data name="MobileValidation" xml:space="preserve">
    <value>Mobile number is not valid</value>
  </data>
  <data name="NotExist" xml:space="preserve">
    <value>Item is not exist</value>
  </data>
  <data name="Number" xml:space="preserve">
    <value>Must be number</value>
  </data>
  <data name="ParentCodeNotValid" xml:space="preserve">
    <value>Code not mach with parent code</value>
  </data>
  <data name="Permission" xml:space="preserve">
    <value>Permission required</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="RelationBetween" xml:space="preserve">
    <value>Relation Between [1] and [2]</value>
  </data>
  <data name="SpecialLenght" xml:space="preserve">
    <value>Number of caracters must be [1]</value>
  </data>
  <data name="TrueOrFalse" xml:space="preserve">
    <value>The item can be true or false</value>
  </data>
  <data name="UniqueName" xml:space="preserve">
    <value>The name must be unique</value>
  </data>
  <data name="UnitPrice" xml:space="preserve">
    <value>UnitPrice</value>
  </data>
  <data name="UpdateImpossible" xml:space="preserve">
    <value>Update impossible</value>
  </data>
  <data name="WarehouseId" xml:space="preserve">
    <value>WarehouseId</value>
  </data>
</root>